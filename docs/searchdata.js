var SearchFiles = ["GUID-7F5BF319-F756-4574-8490-D1CA9D261AFA.html",
							"GUID-1CE8F33B-F9EF-4806-9B9A-83D4F0D0F22C.html",
							"GUID-5370B1FB-B90A-4FCA-8713-ED056E5E93FB.html",
							"GUID-FC11447F-ED45-4602-87B9-B9B89D9CCED0.html",
							"GUID-734386A3-8F2A-4A89-9ADE-6EA2C8AAF67E.html",
							"GUID-6ED7CADC-7B6F-41D7-B895-D7D6CD8D3C40.html",
							"GUID-4B65EAD1-FAD6-427A-AEAD-78A182D807B6.html",
							"GUID-5D7E8100-5D85-421B-A950-6DCF85588EC4.html",
							"GUID-B7B5F283-77D0-4BE0-837A-7ED82434603D.html",
							"GUID-9FABF86F-30C1-4967-881D-D8172BFC24A6.html",
							"GUID-6587125E-9358-4011-873B-7AAE56C71F31.html",
							"GUID-ADA66442-4177-482D-99C9-E8C64CE73E54.html",
							"GUID-968C2559-F27A-47C6-A789-073D8347A5D1.html",
							"GUID-59D3019A-DEAB-4F3C-B225-2A72D4254874.html",
							"GUID-030DFB96-52F2-4B27-86B9-2237151DA0F8.html",
							"GUID-AB71143F-C935-4ED6-A040-B047DAE511A9.html",
							"GUID-CE3CBA55-0468-48FE-AAA3-BE9CFC1FF77D.html",
							"GUID-C6251E79-6515-4CE1-B2E6-B7C37193DA6F.html",
							"GUID-1B44520D-4BD8-425A-A606-183CA2261E50.html",
							"GUID-CEA1DA29-BE84-494A-AA97-C861E20A5956.html",
							"GUID-854A2B4A-D86B-46F7-B278-2D5A4F4F93D7.html",
							"GUID-E616A811-31C2-4FAB-A01E-006809BB6755.html",
							"GUID-E9A1537F-6ED6-4929-81DA-B31CF3D39050.html",
							"GUID-A25021AC-4AB9-46F3-9367-2D395A6A5130.html",
							"GUID-80E0015F-EE1D-4803-9562-B78D7BEF870C.html",
							"GUID-9EC2F29D-DF15-4781-A419-29A17C8F686E.html",
							"GUID-34C62344-B8CC-48D7-A919-C662653B9D7E.html",
							"GUID-07D91ADA-A242-428A-B4E2-C73021377345.html",
							"GUID-7780D62B-24BA-411E-B999-29A97DF1B558.html",
							"GUID-3480A3F6-7BD4-4E62-BBA1-D49774C93DFC.html",
							"GUID-FEA47424-3F90-49A3-9B31-C6D5E0905078.html",
							"GUID-A07AEC91-1DBF-46B6-B253-A063C5BC86C2.html",
							"GUID-B82875FD-AFB6-478F-BF52-C76B796BEC5B.html",
							"GUID-4F9448B3-1CC9-4E5B-8AB2-D9C3BB1A6460.html",
							"GUID-99905C10-3C9C-41F4-8691-6018AF48AC64.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-1B864716-0BD8-4DE4-BF76-99782DCE1FA3.html",
							"GUID-6A8CB99A-BA0A-4767-AC66-D69DBA3C891D.html",
							"GUID-82EF7B89-5318-40A4-9C13-1ECD5DC2568D.html",
							"GUID-148E20E9-1158-432E-AD5B-B9EA83D49E87.html",
							"GUID-24005102-9CA3-48DA-A1A5-B09DC50F3DFA.html",
							"GUID-5AE6D6C8-7849-4BB8-9981-D158DC725031.html",
							"GUID-4AB1B046-7405-465B-800C-21C180F934C6.html",
							"GUID-04A710C9-5415-43BC-9FA7-32EB4A10DB07.html",
							"GUID-5FC60B83-126A-462E-8492-A93228E62591.html",
							"GUID-7C5EABC7-D73D-422E-B006-23890BBCE179.html",
							"GUID-0FE47211-F991-45CF-8F0F-1B1EE0FF96FB.html",
							"GUID-B29EEA91-C0CD-4C9A-A637-B18F274E7B21.html",
							"GUID-969B6D1D-28C5-4EC4-B330-6AE217DAB8F3.html",
							"GUID-EDC9E838-528C-42C5-BDF3-AEA7885CFA4A.html",
							"GUID-6F5EEE2E-6F25-4CF5-BB13-66A17EAEE8BF.html",
							"GUID-2681A3BE-7432-4A66-A617-9628E573D6E8.html",
							"GUID-51676D40-613D-4610-B70E-88606BAEE341.html",
							"GUID-1932C7E3-FA73-480A-8886-F02A1A41D446.html",
							"GUID-4B6F379C-E718-4DEC-95C1-3F86F54889EE.html",
							"GUID-25B5324F-9EB5-4876-84CB-E8FB5A04B25B.html",
							"GUID-AE4F9648-064C-4A80-BA06-57A0D9F17215.html",
							"GUID-5937E4B0-531B-4F3E-92E6-A042FA0872C1.html",
							"GUID-1C2BF865-3F04-48B8-9B03-BF04172FABC9.html",
							"GUID-5404252A-91DA-4B6B-A828-2650A1EB56F6.html",
							"GUID-4F58095F-9950-4D92-B520-EC186E051BCD.html",
							"GUID-4337D93F-0FAF-4A4E-9804-45163A789E3D.html",
							"GUID-4E8F4CCF-3319-462F-AB17-3216C7BF65DA.html",
							"GUID-427D2AC7-7EA4-4A24-BA38-0EE0A2EBE670.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-B97DAB1E-B0A5-4F7D-A14C-14BF163C5ED9.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-8DE0F1C4-FFAB-4B0C-AFEE-DB2DEF4BD83F.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-912DD177-0D95-4248-9AFF-6D4993B5698B.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-DE0ACE20-524D-48EC-BA58-1B752448C7ED.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-0CE171A3-37FA-40EE-83C7-57EA52337A4B.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html",
							"GUID-91F2880A-02CA-42DC-879B-F94B25784D3D.html"];

var SearchTitles = ["MPLAB® Harmony 3 Aerospace Libraries",
"SAM RH71 Aerospace Libraries",
"FLEXRAMECC Peripheral Library (FLEXRAMECC)",
"FLEXRAMECC_STATUS",
"FLEXRAMECC_CALLBACK",
"FLEXRAMECC_OBJ",
"FLEXRAMECC_Initialize",
"FLEXRAMECC_StatusGet",
"FLEXRAMECC_GetFailAddress",
"FLEXRAMECC_ResetCounters",
"FLEXRAMECC_FixCallbackRegister",
"FLEXRAMECC_NoFixCallbackRegister",
"FLEXRAMECC_TestModeReadEnable",
"FLEXRAMECC_TestModeReadDisable",
"FLEXRAMECC_TestModeGetCbValue",
"FLEXRAMECC_TestModeWriteEnable",
"FLEXRAMECC_TestModeWriteDisable",
"FLEXRAMECC_TestModeSetCbValue",
"TCMECC Peripheral Library (TCMHECC)",
"TCMECC_STATUS",
"TCMECC_CALLBACK",
"TCMECC_OBJ",
"TCMECC_Initialize",
"TCMECC_StatusGet",
"TCMECC_GetFailAddressITCM",
"TCMECC_GetFailAddressDTCM",
"TCMECC_ResetCounters",
"TCMECC_FixCallbackRegister",
"TCMECC_NoFixCallbackRegister",
"TCMECC_TestModeReadEnable",
"TCMECC_TestModeReadDisable",
"TCMECC_TestModeGetCbValue",
"TCMECC_TestModeWriteEnable",
"TCMECC_TestModeWriteDisable",
"TCMECC_TestModeSetCbValue",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"IP1553 Peripheral Library (IP1553)",
"IP1553_INT_MASK",
"IP1553_DATA_TX_TYPE",
"IP1553_BUS",
"IP1553_MODE_CMD",
"IP1553_CALLBACK",
"IP1553_OBJ",
"IP1553_Initialize",
"IP1553_BuffersConfigSet",
"IP1553_GetTxBuffersStatus",
"IP1553_ResetTxBuffersStatus",
"IP1553_GetRxBuffersStatus",
"IP1553_ResetRxBuffersStatus",
"IP1553_IrqStatusGet",
"IP1553_BcStartDataTransfer",
"IP1553_BcModeCommandTransfer",
"IP1553_GetFirstStatusWord",
"IP1553_GetSecondStatusWord",
"IP1553_BCEnableCmdSet",
"IP1553_SREQBitCmdSet",
"IP1553_BusyBitCmdSet",
"IP1553_SSBitCmdSet",
"IP1553_TRBitCmdSet",
"IP1553_BitWordSet",
"IP1553_VectorWordSet",
"IP1553_CallbackRegister",
"IP1553_InterruptEnable",
"IP1553_InterruptDisable",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"SAM RH707 Aerospace Libraries",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"FLEXRAMECC_GetFailData",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"TCMECC_GetFailDataITCM",
"ICM Peripheral Library (ICM)",
"TCMECC_GetFailDataDTCM",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"IP1553_INT_MASK",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)",
"ICM Peripheral Library (ICM)"];

var SearchInfo = [" MPLAB® Harmony 3 Aerospace Libraries This repository contains the MPLAB® Harmony 3 Aerospace peripheral libraries Quickly incorporate connectivity to your designs with Aerospace ICs modules software and development kits that make connecting effortless for your customers Our comprehensive Aerospace portfolio has the technology to meet your range data rate interoperability frequency and topology needs Peripheral Libraries are devices family specific Below is the list of supported families: ",
							" SAM RH71 Aerospace Libraries The following peripherals are supported for this family: ",
							" FLEXRAMECC Peripheral Library (FLEXRAMECC) The embedded Hardened Error Correction Code (HECC) Controller for FlexRAM protects this memory region against unexpected bit change of state due to external environment conditions Configuring the library Configure the peripheral library using the MHC flexramecc_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization FLEXRAMECC_FixCallbackRegister and FLEXRAMECC_NoFixCallbackRegister functions can be used to register callbacks \"Use injection test mode\" option can be enabled to add functions for the test of error injection by reading or setting the ECC check bit value Using the library If interrupts are used the callback function should be set for expected interrupts types: /* Register Fixable errors Callback */ FLEXRAMECC_FixCallbackRegister(FLEXRAM_FixCallback_Function (uintptr_t)NULL); /* Register UnFixable errors Callback */ FLEXRAMECC_NoFixCallbackRegister(FLEXRAM_NoFixCallback_Function (uintptr_t)NULL); When an ECC error is detected and an interrupt occurs the fail address must be read before the status in order to avoid multiple interrupts: /* Get ECC fault address */ uint32_t* fault_pointer = (uint32_t*)(FLEXRAMECC_GetFailAddress()); /* Get FLEXRAMECC status */ FLEXRAMECC_STATUS status_reg = FLEXRAMECC_StatusGet(); The faulty address may then be fixed by the application if applicable Error injection test mode ECC Check bit read The ECC check bit value can be get when the read test mode is activated Once this mode is activated the check bit value for each read of data on FlexRAM memory is stored It is possible to get the last check bit value using the function FLEXRAMECC_TestModeGetCbValue  /* Enable FLEXRAM ECC Test mode Read */ FLEXRAMECC_TestModeReadEnable(); __DSB(); __ISB(); /* Read data in FlexRAM */ data = buffer[index]; __DSB(); __ISB(); /* Get the Check Bit for last read data in FlexRAM */ ecc_tcb = FLEXRAMECC_TestModeGetCbValue(); __DSB(); __ISB(); /* Disable FLEXRAM ECC Test mode Read */ FLEXRAMECC_TestModeReadDisable(); Note: It is recommended to use memory barriers on Cortex-M core-based products where instructions can be executed out of programmed order or to ensure that all memory transfers or instructions are completed before any new instruction is executed In our application we must ensure that register modification and memory transfers are completed before executing the next step ECC Check bit write The ECC check bit value can be override when the write test mode is activated Once this mode is activated the check bit value for each write of data on FlexRAM memory is override by the given value instead of being calculated automatically The check bit value used should be set using the function FLEXRAMECC_TestModeSetCbValue  /* Enable FLEXRAM ECC Test mode Write */ FLEXRAMECC_TestModeWriteEnable(); __DSB(); __ISB(); /* Set the Check Bit for override when data will be write in FlexRAM */ FLEXRAMECC_TestModeSetCbValue(ecc_tcb); __DSB(); __ISB(); /* Write data in FlexRAM */ buffer = data; __DSB(); __ISB(); /* Disable FLEXRAM ECC Test mode Write */ FLEXRAMECC_TestModeWriteDisable(); Note: It is recommended to use memory barriers on Cortex-M core-based products where instructions can be executed out of programmed order or to ensure that all memory transfers or instructions are completed before any new instruction is executed In our application we must ensure that register modification and memory transfers are completed before executing the next step ",
							" FLEXRAMECC_STATUS typedef enum { FLEXRAMECC_STATUS_MEM_FIX = FLEXRAMECC_SR_MEM_FIX_Msk FLEXRAMECC_STATUS_CPT_FIX_MASK = FLEXRAMECC_SR_CPT_FIX_Msk FLEXRAMECC_STATUS_OVER_FIX = FLEXRAMECC_SR_OVER_FIX_Msk FLEXRAMECC_STATUS_MEM_NOFIX = FLEXRAMECC_SR_MEM_NOFIX_Msk FLEXRAMECC_STATUS_CPT_NOFIX_MASK = FLEXRAMECC_SR_CPT_NOFIX_Msk FLEXRAMECC_STATUS_OVER_NOFIX = FLEXRAMECC_SR_OVER_NOFIX_Msk FLEXRAMECC_STATUS_HES_MASK = FLEXRAMECC_SR_HES_Msk FLEXRAMECC_STATUS_TYPE = FLEXRAMECC_SR_TYPE_Msk /* Force the compiler to reserve 32-bit memory for enum */ FLEXRAMECC_STATUS_INVALID = 0xFFFFFFFF } FLEXRAMECC_STATUS; Summary Identifies the FLEXRAMECC current status Description This data type identifies the FLEXRAMECC status ",
							" FLEXRAMECC_CALLBACK typedef void (*FLEXRAMECC_CALLBACK) (uintptr_t contextHandle); Summary FLEXRAMECC Callback Function Pointer Description This data type defines the required function signature for the FLEXRAMECC callback function Application must register a pointer to a callback function whose function signature (parameter and return value types) match the types specified by this function pointer in order to receive callback from the PLIB The parameters and return values are described here and a partial example implementation is provided Parameters contextHandle - Value identifying the context of the application that registered the callback function Remarks The context parameter contains the a handle to the client context provided at the time the callback function was registered using the CallbackRegister function This context handle value is passed back to the client as the \"context\" parameter It can be any value (such as a pointer to the client's data) necessary to identify the client context or instance of the client that made the data transfer request The callback function executes in the PLIB's interrupt context It is recommended of the application to not perform process intensive or blocking operations with in this function Example void APP_FLEXRAMECC_FixHandler(uintptr_t context) { //Fixable error has occurred } FLEXRAMECC_FixCallbackRegister( APP_FLEXRAMECC_FixHandler (uintptr_t)NULL); ",
							" FLEXRAMECC_OBJ typedef struct { /* Transfer Event Callback for Fixable Error interrupt*/ FLEXRAMECC_CALLBACK fix_callback; /* Transfer Event Callback Context for Fixable Error interrupt*/ uintptr_t fix_context; /* Transfer Event Callback for NoFixable Error interrupt*/ FLEXRAMECC_CALLBACK nofix_callback; /* Transfer Event Callback Context for NoFixable Error interrupt*/ uintptr_t nofix_context; } FLEXRAMECC_OBJ; Summary FLEXRAMECC PLib Object structure Description This data structure defines the FLEXRAMECC PLib Instance Object ",
							" FLEXRAMECC_Initialize void FLEXRAMECC_Initialize(void) Summary Initializes given instance of the FLEXRAMECC peripheral Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_StatusGet FLEXRAMECC_STATUS FLEXRAMECC_StatusGet(void) Summary Get the status of the FLEXRAMECC peripheral Preconditions None Parameters None Returns Current status of the FLEXRAMECC peripheral ",
							" FLEXRAMECC_GetFailAddress uint32_t FLEXRAMECC_GetFailAddress(void) Summary Get the last fail address were ECC error occurs in FLEXRAM memory Preconditions None Parameters None Returns Fail address were fixable or unfixable error occurred in FLEXRAM memory ",
							" FLEXRAMECC_ResetCounters void FLEXRAMECC_ResetCounters(void) Summary Reset Fix and NoFix error counters of the FLEXRAMECC peripheral Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_FixCallbackRegister void FLEXRAMECC_FixCallbackRegister(FLEXRAMECC_CALLBACK callback uintptr_t context) Summary Sets the pointer to the function (and it's context) to be called when the given FLEXRAMECC's ECC Fixable Error interrupt events occur Description This function sets the pointer to a client function to be called \"back\" when the given FLEXRAMECC's interrupt events occur It also passes a context value (usually a pointer to a context structure) that is passed into the function when it is called The specified callback function will be called from the peripheral interrupt context Preconditions FLEXRAMECC_Initialize must have been called for the associated FLEXRAMECC instance Parameters callback - A pointer to a function with a calling signature defined by the FLEXRAMECC_CALLBACK data type Setting this to NULL disables the callback feature contextHandle - A value (usually a pointer) passed (unused) into the function identified by the callback parameter Returns None Example Refer to the description of the FLEXRAMECC_CALLBACK data type for example usage ",
							" FLEXRAMECC_NoFixCallbackRegister void FLEXRAMECC_NoFixCallbackRegister(FLEXRAMECC_CALLBACK callback uintptr_t context) Summary Sets the pointer to the function (and it's context) to be called when the given FLEXRAMECC's ECC Not Fixable Error interrupt events occur Description This function sets the pointer to a client function to be called \"back\" when the given FLEXRAMECC's interrupt events occur It also passes a context value (usually a pointer to a context structure) that is passed into the function when it is called The specified callback function will be called from the peripheral interrupt context Preconditions FLEXRAMECC_Initialize must have been called for the associated FLEXRAMECC instance Parameters callback - A pointer to a function with a calling signature defined by the FLEXRAMECC_CALLBACK data type Setting this to NULL disables the callback feature contextHandle - A value (usually a pointer) passed (unused) into the function identified by the callback parameter Returns None Example Refer to the description of the FLEXRAMECC_CALLBACK data type for example usage ",
							" FLEXRAMECC_TestModeReadEnable void FLEXRAMECC_TestModeReadEnable(void) Summary Enable the FLEXRAMECC peripheral test mode Read When enabled the ECC check bit value read is updated in TESTCB1 register at each FLEXRAM data read Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_TestModeReadDisable void FLEXRAMECC_TestModeReadDisable(void) Summary Disable the FLEXRAMECC peripheral test mode Read Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_TestModeGetCbValue uint8_t FLEXRAMECC_TestModeGetCbValue(void) Summary Get the FLEXRAMECC peripheral test mode check bit values Preconditions None Parameters None Returns Test check bit value ",
							" FLEXRAMECC_TestModeWriteEnable void FLEXRAMECC_TestModeWriteEnable(void) Summary Enable the FLEXRAMECC peripheral test mode Write When enabled the ECC check bit value in TESTCB1 register is write in memory at each FLEXRAM data write instead of calculated check bit Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_TestModeWriteDisable void FLEXRAMECC_TestModeWriteDisable(void) Summary Disable the FLEXRAMECC peripheral test mode Write Preconditions None Parameters None Returns None ",
							" FLEXRAMECC_TestModeSetCbValue void FLEXRAMECC_TestModeSetCbValue(uint8_t tcb1) Summary Set the FLEXRAMECC peripheral test mode check bit values Preconditions None Parameters tcb1 - Test check bit value to set Returns None ",
							" TCMECC Peripheral Library (TCMHECC) The embedded Hardened Error Correction Code (HECC) Controller for TCM protects this memory region against unexpected bit change of state due to external environment conditions Configuring the library Configure the peripheral library using the MHC tcmecc_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization TCMECC_FixCallbackRegister and TCMECC_NoFixCallbackRegister functions can be used to register callbacks \"Use injection test mode\" option can be enabled to add functions for the test of error injection by reading or setting the ECC check bit value Using the library If interrupts are used the callback function should be set for expected interrupts types: /* Register Fixable errors Callback */ TCMECC_FixCallbackRegister(TCM_FixCallback_Function (uintptr_t)NULL); /* Register UnFixable errors Callback */ TCMECC_NoFixCallbackRegister(TCM_NoFixCallback_Function (uintptr_t)NULL); When an ECC error is detected and an interrupt occurs the fail address must be read before the status in order to avoid multiple interrupts: /* Get DTCM fault address */ uint32_t* fault_pointer_word = (uint32_t*)(TCMECC_GetFailAddressDTCM() 0x2003FFFF); /* Get ITCM fault address */ uint64_t* fault_pointer = (uint64_t*)(TCMECC_GetFailAddressITCM() 0x1FFFF); /* Only for Fixable error handler : Read corrected data on the Fly for ITCM */ uint64_t fault_data = *fault_pointer; /* Only for Fixable error handler : Read corrected data on the Fly for DTCM */ if ( ( (uint32_t)fault_pointer_word = 0x20000000 ) ( (uint32_t)fault_pointer_word = 0x2003FFFF ) ) { fault_data_word = *fault_pointer_word; } /* Read TCMECC Status */ TCMECC_STATUS status_reg = TCMECC_StatusGet(); The faulty address may then be fixed by the application if applicable Error injection test mode ECC Check bit read The ECC check bit value can be get when the read test mode is activated Once this mode is activated the check bit value for each read of data on TCM memory is stored It is possible to get the last check bit value using the function TCMECC_TestModeGetCbValue  /* Reset check bit value to 0 */ TCMECC_TestModeSetCbValue(0 0); __DSB(); __ISB(); /* Enable TCM ECC Test mode Read */ TCMECC_TestModeReadEnable(); __DSB(); __ISB(); /* Read data in TCM */ data = buffer; /* Disable TCM ECC Test mode Read */ TCMECC_TestModeReadDisable(); __DSB(); __ISB(); /* Get the Check Bit for last read data in TCM - Wait check bit values are correctly updated */ do { TCMECC_TestModeGetCbValue( (pEccErrorInject- ecc_tcb1) (pEccErrorInject- ecc_tcb2)); } while ( (pEccErrorInject- ecc_tcb1 == 0) (pEccErrorInject- ecc_tcb2 == 0) ); Note: It is recommended to use memory barriers on Cortex-M core-based products where instructions can be executed out of programmed order or to ensure that all memory transfers or instructions are completed before any new instruction is executed In our application we must ensure that register modification and memory transfers are completed before executing the next step ECC Check bit write The ECC check bit value can be override when the write test mode is activated Once this mode is activated the check bit value for each write of data on TCM memory is override by the given value instead of being calculated automatically The check bit value used should be set using the function TCMECC_TestModeSetCbValue  /* Enable TCM ECC Test mode Write */ TCMECC_TestModeWriteEnable(); __DSB(); __ISB(); /* Set the Check Bit for override when data will be write in TCM */ TCMECC_TestModeSetCbValue(tcb1 tcb2); __DSB(); __ISB(); /* Write data in TCM */ buffer = data; __DSB(); __ISB(); /* Disable TCM ECC Test mode Write */ TCMECC_TestModeWriteDisable(); Note: It is recommended to use memory barriers on Cortex-M core-based products where instructions can be executed out of programmed order or to ensure that all memory transfers or instructions are completed before any new instruction is executed In our application we must ensure that register modification and memory transfers are completed before executing the next step ",
							" TCMECC_STATUS typedef enum { TCMECC_STATUS_MEM_FIX_I = TCMECC_SR_MEM_FIX_I_Msk TCMECC_STATUS_MEM_FIX_D = TCMECC_SR_MEM_FIX_D_Msk TCMECC_STATUS_CPT_FIX_MASK = TCMECC_SR_CPT_FIX_Msk TCMECC_STATUS_OVER_FIX = TCMECC_SR_OVER_FIX_Msk TCMECC_STATUS_MEM_NOFIX_I = TCMECC_SR_MEM_NOFIX_I_Msk TCMECC_STATUS_MEM_NOFIX_D = TCMECC_SR_MEM_NOFIX_D_Msk TCMECC_STATUS_CPT_NOFIX_MASK = TCMECC_SR_CPT_NOFIX_Msk TCMECC_STATUS_OVER_NOFIX = TCMECC_SR_OVER_NOFIX_Msk TCMECC_STATUS_HES_MASK = TCMECC_SR_HES_Msk TCMECC_STATUS_ONE = TCMECC_SR_ONE_Msk TCMECC_STATUS_MEM_ID_I = TCMECC_SR_MEM_ID_I_Msk TCMECC_STATUS_MEM_ID_D = TCMECC_SR_MEM_ID_D_Msk /* Force the compiler to reserve 32-bit memory for enum */ TCMECC_STATUS_INVALID = 0xFFFFFFFF } TCMECC_STATUS; Summary Identifies the TCMECC current status Description This data type identifies the TCMECC status ",
							" TCMECC_CALLBACK typedef void (*TCMECC_CALLBACK) (uintptr_t contextHandle); Summary TCMECC Callback Function Pointer Description This data type defines the required function signature for the TCMECC callback function Application must register a pointer to a callback function whose function signature (parameter and return value types) match the types specified by this function pointer in order to receive callback from the PLIB The parameters and return values are described here and a partial example implementation is provided Parameters contextHandle - Value identifying the context of the application that registered the callback function Remarks The context parameter contains the a handle to the client context provided at the time the callback function was registered using the CallbackRegister function This context handle value is passed back to the client as the \"context\" parameter It can be any value (such as a pointer to the client's data) necessary to identify the client context or instance of the client that made the data transfer request The callback function executes in the PLIB's interrupt context It is recommended of the application to not perform process intensive or blocking operations with in this function Example void APP_TCMECC_FixHandler(uintptr_t context) { //Fixable error has occurred } TCMECC_FixCallbackRegister( APP_TCMECC_FixHandler (uintptr_t)NULL); ",
							" TCMECC_OBJ typedef struct { /* Transfer Event Callback for Fixable Error interrupt*/ TCMECC_CALLBACK fix_callback; /* Transfer Event Callback Context for Fixable Error interrupt*/ uintptr_t fix_context; /* Transfer Event Callback for NoFixable Error interrupt */ TCMECC_CALLBACK nofix_callback; /* Transfer Event Callback Context for NoFixable Error interrupt */ uintptr_t nofix_context; } TCMECC_OBJ; Summary TCMECC PLib Object structure Description This data structure defines the TCMECC PLib Instance Object ",
							" TCMECC_Initialize void TCMECC_Initialize(void) Summary Initializes given instance of the TCMECC peripheral Preconditions None Parameters None Returns None ",
							" TCMECC_StatusGet TCMECC_STATUS TCMECC_StatusGet(void) Summary Get the status of the TCMECC peripheral Preconditions None Parameters None Returns Current status of the TCMECC peripheral ",
							" TCMECC_GetFailAddressITCM uint32_t TCMECC_GetFailAddressITCM(void) Summary Get the last fail address were ECC error occurs in Instruction TCM Preconditions None Parameters None Returns Fail address were fixable or unfixable error occurred in ITCM ",
							" TCMECC_GetFailAddressDTCM uint32_t TCMECC_GetFailAddressDTCM(void) Summary Get the last fail address were ECC error occurs in Data TCM Preconditions None Parameters None Returns Fail address were fixable or unfixable error occurred in DTCM ",
							" TCMECC_ResetCounters void TCMECC_ResetCounters(void) Summary Reset Fix and NoFix error counters of the TCMECC peripheral Preconditions None Parameters None Returns None ",
							" TCMECC_FixCallbackRegister void TCMECC_FixCallbackRegister(TCMECC_CALLBACK callback uintptr_t context) Summary Sets the pointer to the function (and it's context) to be called when the given TCMECC's Fixable interrupt events occur Description This function sets the pointer to a client function to be called \"back\" when the given TCMECC's interrupt events occur It also passes a context value (usually a pointer to a context structure) that is passed into the function when it is called The specified callback function will be called from the peripheral interrupt context Preconditions TCMECC_Initialize must have been called for the associated TCMECC instance Parameters callback - A pointer to a function with a calling signature defined by the TCMECC_CALLBACK data type Setting this to NULL disables the callback feature contextHandle - A value (usually a pointer) passed (unused) into the function identified by the callback parameter Returns None Example // Refer to the description of the TCMECC_CALLBACK data type for // example usage ",
							" TCMECC_NoFixCallbackRegister void TCMECC_NoFixCallbackRegister(TCMECC_CALLBACK callback uintptr_t context) Summary Sets the pointer to the function (and it's context) to be called when the given TCMECC's UnFixable interrupt events occur Description This function sets the pointer to a client function to be called \"back\" when the given TCMECC's interrupt events occur It also passes a context value (usually a pointer to a context structure) that is passed into the function when it is called The specified callback function will be called from the peripheral interrupt context Preconditions TCMECC_Initialize must have been called for the associated TCMECC instance Parameters callback - A pointer to a function with a calling signature defined by the TCMECC_CALLBACK data type Setting this to NULL disables the callback feature contextHandle - A value (usually a pointer) passed (unused) into the function identified by the callback parameter Returns None Example // Refer to the description of the TCMECC_CALLBACK data type for // example usage ",
							" TCMECC_TestModeReadEnable void TCMECC_TestModeReadEnable(void) Summary Enable the TCMECC peripheral test mode Read When enabled the ECC check bit value read is updated in TESTCB1 register at each TCM data read Preconditions None Parameters None Returns None ",
							" TCMECC_TestModeReadDisable void TCMECC_TestModeReadDisable(void) Summary Disable the TCMECC peripheral test mode Read Preconditions None Parameters None Returns None ",
							" TCMECC_TestModeGetCbValue void TCMECC_TestModeGetCbValue(uint8_t* tcb1 uint8_t* tcb2) Summary Get the TCMECC peripheral test mode check bit values Preconditions None Parameters tcb1 - Pointer of the variable to be updated with test check bit 1 value tcb2 - Pointer of the variable to be updated with test check bit 2 value Returns None ",
							" TCMECC_TestModeWriteEnable void TCMECC_TestModeWriteEnable(void) Summary Enable the TCMECC peripheral test mode Write When enabled the ECC check bit value in TESTCB1 register is write in memory at each TCM data write instead of calculated check bit Preconditions None Parameters None Returns None ",
							" TCMECC_TestModeWriteDisable void TCMECC_TestModeWriteDisable(void) Summary Disable the TCMECC peripheral test mode Write Preconditions None Parameters None Returns None ",
							" TCMECC_TestModeSetCbValue void TCMECC_TestModeSetCbValue(uint8_t tcb1 uint8_t tcb2) Summary Set the TCMECC peripheral test mode check bit values Preconditions None Parameters tcb1 - Test check bit 1 value to set tcb2 - Test check bit 2 value to set Returns None ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" IP1553 Peripheral Library (IP1553) The IP1553 peripheral module is an interface commonly used in space applications It features one nominal bus and one redundant bus to obtain reliable transfers and it can carry out data transfers at a bit rate of 1 Mbits/sec A typical network is made of a Bus Controller (BC) and up to 31 Remote Terminals (RT) The IP1553 interface embeds two configurations of the Bus Controller or Remote Terminal as defined in the MIL-STD-1553B standard Configuring the library Configure the peripheral library using the MHC ip1553_mhc_config 12 MHz input clock should be configured with clock configurator The 1553 mode used is configurable : BC or RT mode RT address should be configured for RT mode \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support (Enable Disable and callback register) Using the library The IP1553 initialization is done during system initialization It configures the module depending on the given parameters in MHC interface For both modes once the module is initialize the receive and transmit buffers should be initialized Application must allocate 2 buffers (one for receive and one for transmit) from non-cached contiguous memory and buffer size must be 2 Kbyte (16 bit IP1553_BUFFERS_SIZE IP1553_BUFFERS_NUM) Code example for buffers configuration: /* Allocation of receive buffer for IP1553 */ uint16_t IP1553RxBuffersRAM[IP1553_BUFFERS_NUM][IP1553_BUFFERS_SIZE] __attribute__((aligned (32)))__attribute__((section (\" ram_nocache\"))); /* Allocation of transmit buffer for IP1553 */ uint16_t IP1553TxBuffersRAM[IP1553_BUFFERS_NUM][IP1553_BUFFERS_SIZE] __attribute__((aligned (32)))__attribute__((section (\" ram_nocache\"))); /* Set buffers Configuration */ IP1553_BuffersConfigSet( IP1553TxBuffersRAM[0][0] IP1553RxBuffersRAM[0][0]); To receive and transmit the status of the buffers must be reset (indicate buffer is empty for RX and that buffer is ready to be sent for Tx): /* Reset Tx and Rx status for buffers 0 and 31 */ IP1553_ResetTxBuffersStatus(0x80000001); IP1553_ResetRxBuffersStatus(0x80000001); Bus Controller mode Once initialized the Bus Controller can issue data transfer or mode commands: From BC to RT From RT to BC From RT to RT After the send of the command the BC can check the status to detect the end of transmission/reception and/or possible errors flags Example of sending data from BC buffer 0 to RT1 buffer 3 and wait for status word: /* Send 4 words data from BC buffer 2 to RT1 buffer 3 on Bus A */ IP1553_BcStartDataTransfer( IP1553_DATA_TX_TYPE_BC_TO_RT 0 2 1 3 4 IP1553_BUS_A ); /* Wait for status word */ do { IP1553_INT_MASK status = IP1553_IrqStatusGet(); if ( (status IP1553_INT_MASK_ETX) = 0 ) { isTransferEnded = true; } if ( (status IP1553_INT_MASK_ETRANS_MASK) = 0 ) { hasStatusWord = IP1553_INT_MASK_GET_ETRANS(status); } transferErrors = status IP1553_INT_MASK_ERROR_MASK; } while ( ( (isTransferEnded == false) || (hasStatusWord == 0) ) (transferErrors == 0) ); Example of sending Synchronize without data mode command to RT01 and wait for status word: IP1553_BcModeCommandTransfer( 1 IP1553_MODE_CMD_SYNCHRONIZE_WITHOUT_DATA 0 IP1553_BUS_A); /* Wait end of transfer */ do { IP1553_INT_MASK status = IP1553_IrqStatusGet(); if ( (status IP1553_INT_MASK_ETRANS_MASK) = 0 ) { hasStatusWord = IP1553_INT_MASK_GET_ETRANS(status); } transferErrors = status IP1553_INT_MASK_ERROR_MASK; } while ( (hasStatusWord == 0) (transferErrors == 0) ); /* Get Transfer Status Word */ transferStatusWord = IP1553_GetFirstStatusWord(); Remote Terminal mode When configured in RT mode the 1553 module features a specific behavior depending on the command received from the 1553 network The status return by IP1553_IrqStatusGet contains the information on detected errors or the end of data reception and transmission If the buffer read or write by the BC command were prepared (reset status to indicate empty or ready to send) the transfer is executed without error The functions IP1553_GetRxBuffersStatus and IP1553_GetTxBuffersStatus can then be used to determine the modified buffers Example of wait of data reception: while ( true ) { IP1553_INT_MASK status = IP1553_IrqStatusGet(); if ( (status IP1553_INT_MASK_ERX) == IP1553_INT_MASK_ERX ) { uint32_t lastActiveBuffers = (~(IP1553_GetRxBuffersStatus())) 0x80000001; uint32_t buffer = 0; while ( lastActiveBuffers = 0 ) { while ( ( lastActiveBuffers 0x1 ) == 0 ) { buffer++; lastActiveBuffers = 1; } printf(\"RX buffer : %u\" (unsigned int) buffer); /* Reset Rx buffer status */ IP1553_ResetRxBuffersStatus(IP1553_BUFFER_TO_BITFIELD_SA(buffer)); /* Go to next bit in lastActiveBuffer bit field */ buffer++; lastActiveBuffers = 1; } } } In RT mode the peripheral send mode command response automatically to the Bus Controller The following functions can be used to set the flag bits in status word sent in response: IP1553_BCEnableCmdSet : Value indicated in the Dynamic Bus Control bit of the status word IP1553_SREQBitCmdSet : Value of the Service Request bit to returned in the status word IP1553_BusyBitCmdSet : Value of the busy bit to be returned in the status word IP1553_SSBitCmdSet : Value of the Subsystem Flag bit to be returned in the status word IP1553_TRBitCmdSet : Value of the T/F bit to be returned in the status word For Transmit Built-In Test and Transmit Vector Word mode command the data word sent in response can be modify using the functions: IP1553_BitWordSet : For Transmit Built-In Test response IP1553_VectorWordSet : For Transmit Vector Word response Using interrupts When interrupts are used to check the IP1553 status the interrupt callback function should be set and expected interrupts enabled: /* Set 1553 application callback on interrupt event */ IP1553_CallbackRegister(IP1553_Callback_Function (uintptr_t) NULL); /* Enable all IP1553 interrupts */ IP1553_InterruptEnable( IP1553_INT_MASK_EMT | IP1553_INT_MASK_MTE | IP1553_INT_MASK_ERX | IP1553_INT_MASK_ETX | IP1553_INT_MASK_ETRANS_MASK | IP1553_INT_MASK_TE | IP1553_INT_MASK_TCE | IP1553_INT_MASK_TPE | IP1553_INT_MASK_TDE | IP1553_INT_MASK_TTE | IP1553_INT_MASK_TWE | IP1553_INT_MASK_BE | IP1553_INT_MASK_ITR | IP1553_INT_MASK_TVR | IP1553_INT_MASK_DBR | IP1553_INT_MASK_STR | IP1553_INT_MASK_TSR | IP1553_INT_MASK_OSR | IP1553_INT_MASK_SDR | IP1553_INT_MASK_SWD | IP1553_INT_MASK_RRT | IP1553_INT_MASK_ITF | IP1553_INT_MASK_OTF | IP1553_INT_MASK_IPB); ",
							" IP1553_INT_MASK typedef enum { IP1553_INT_MASK_EMT = IP1553_ISR_EMT_Msk IP1553_INT_MASK_MTE = IP1553_ISR_MTE_Msk IP1553_INT_MASK_ERX = IP1553_ISR_ERX_Msk IP1553_INT_MASK_ETX = IP1553_ISR_ETX_Msk IP1553_INT_MASK_ETRANS_MASK = IP1553_ISR_ETRANS_Msk IP1553_INT_MASK_TE = IP1553_ISR_TE_Msk IP1553_INT_MASK_TCE = IP1553_ISR_TCE_Msk IP1553_INT_MASK_TPE = IP1553_ISR_TPE_Msk IP1553_INT_MASK_TDE = IP1553_ISR_TDE_Msk IP1553_INT_MASK_TTE = IP1553_ISR_TTE_Msk IP1553_INT_MASK_TWE = IP1553_ISR_TWE_Msk IP1553_INT_MASK_BE = IP1553_ISR_BE_Msk IP1553_INT_MASK_ITR = IP1553_ISR_ITR_Msk IP1553_INT_MASK_TVR = IP1553_ISR_TVR_Msk IP1553_INT_MASK_DBR = IP1553_ISR_DBR_Msk IP1553_INT_MASK_STR = IP1553_ISR_STR_Msk IP1553_INT_MASK_TSR = IP1553_ISR_TSR_Msk IP1553_INT_MASK_OSR = IP1553_ISR_OSR_Msk IP1553_INT_MASK_SDR = IP1553_ISR_SDR_Msk IP1553_INT_MASK_SWD = IP1553_ISR_SWD_Msk IP1553_INT_MASK_RRT = IP1553_ISR_RRT_Msk IP1553_INT_MASK_ITF = IP1553_ISR_ITF_Msk IP1553_INT_MASK_OTF = IP1553_ISR_OTF_Msk IP1553_INT_MASK_IPB = IP1553_ISR_IPB_Msk IP1553_INT_MASK_ERROR_MASK = ( IP1553_INT_MASK_MTE | IP1553_INT_MASK_TE | IP1553_INT_MASK_TCE | IP1553_INT_MASK_TPE | IP1553_INT_MASK_TDE | IP1553_INT_MASK_TTE | IP1553_INT_MASK_TWE | IP1553_INT_MASK_BE | IP1553_INT_MASK_ITR ) /* Force the compiler to reserve 32-bit memory for enum */ IP1553_INT_MASK_INVALID = 0xFFFFFFFF } IP1553_INT_MASK; Summary Identifies the IP1553 current interrupt status Description This data type identifies the IP1553 interrupt status ",
							" IP1553_DATA_TX_TYPE typedef enum { IP1553_DATA_TX_TYPE_BC_TO_RT = 0 IP1553_DATA_TX_TYPE_RT_TO_BC IP1553_DATA_TX_TYPE_RT_TO_RT } IP1553_DATA_TX_TYPE; Summary IP1553 data transfer types Description This data type identifies the data transfer type that BC initiate ",
							" IP1553_BUS typedef enum { IP1553_BUS_A = 0 IP1553_BUS_B } IP1553_BUS; Summary IP1553 output bus selection Description This data type identifies the IP1553 output bus selection ",
							" IP1553_MODE_CMD typedef enum { IP1553_MODE_CMD_DYNAMIC_BUS_CONTROL = 0 IP1553_MODE_CMD_SYNCHRONIZE_WITHOUT_DATA = 1 IP1553_MODE_CMD_TRANSMIT_STATUS_WORD = 2 IP1553_MODE_CMD_INITIATE_SELF_TEST = 3 IP1553_MODE_CMD_TRANSMITTER_SHUTDOWN = 4 IP1553_MODE_CMD_OVERRIDE_TRANSMITTER_SHUTDOWN = 5 IP1553_MODE_CMD_INHIBIT_TERMINAL_FLAG_BIT = 6 IP1553_MODE_CMD_OVERRIDE_INHIBIT_TERMINAL_FLAG_BIT = 7 IP1553_MODE_CMD_RESET_REMOTE_TERMINAL = 8 IP1553_MODE_CMD_TRANSMIT_VECTOR_WORD = 16 IP1553_MODE_CMD_SYNCHRONIZE_WITH_DATA = 17 IP1553_MODE_CMD_TRANSMIT_LAST_COMMAND = 18 IP1553_MODE_CMD_TRANSMIT_BIT_WORD = 19 } IP1553_MODE_CMD; Summary IP1553 Mode Command code Description This data type identifies the 1553 protocol Mode Command code values ",
							" IP1553_CALLBACK typedef void (*IP1553_CALLBACK) (uintptr_t contextHandle); Summary IP1553 Callback Function Pointer Description This data type defines the required function signature for the IP1553 callback function Application must register a pointer to a callback function whose function signature (parameter and return value types) match the types specified by this function pointer in order to receive callback from the PLIB The parameters and return values are described here and a partial example implementation is provided Parameters contextHandle - Value identifying the context of the application that registered the callback function Remarks The context parameter contains the a handle to the client context provided at the time the callback function was registered using the CallbackRegister function This context handle value is passed back to the client as the \"context\" parameter It can be any value (such as a pointer to the client's data) necessary to identify the client context or instance of the client that made the data transfer request The callback function executes in the PLIB's interrupt context It is recommended of the application to not perform process intensive or blocking operations with in this function Example void APP_IP1553_Handler(uintptr_t context) { //Fixable error has occurred } IP1553_CallbackRegister( APP_IP1553_Handler (uintptr_t)NULL); ",
							" IP1553_OBJ typedef struct { /* Transfer Event Callback */ IP1553_CALLBACK callback; /* Transfer Event Callback Context */ uintptr_t context; } IP1553_OBJ; Summary IP1553 PLib Object structure Description This data structure defines the IP1553 PLib Instance Object ",
							" IP1553_Initialize void IP1553_Initialize(void) Summary Initializes given instance of the IP1553 peripheral Set the Mode (Bus Controller or Remote Terminal) and reset the instance In RT mode set the RT Address Enable all 1553 interrupt sources Preconditions None Parameters None Returns None ",
							" IP1553_BuffersConfigSet void IP1553_BuffersConfigSet(uint16_t* txBuffers uint16_t* rxBuffers) Summary Set the memory base address for emmission and reception buffers Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters txBuffers - Pointer to application allocated emission buffer base address Application must allocate buffer from non-cached contiguous memory and buffer size must be 16 bit * IP1553_BUFFERS_SIZE * IP1553_BUFFERS_NUM rxBuffers - Pointer to application allocated reception buffer base address Application must allocate buffer from non-cached contiguous memory and buffer size must be 16 bit * IP1553_BUFFERS_SIZE * IP1553_BUFFERS_NUM Returns None ",
							" IP1553_GetTxBuffersStatus uint32_t IP1553_GetTxBuffersStatus(void) Summary Returns the transmission buffers status Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters None Returns Bitfield value that indicates for each of the 32 buffers if they are ready to be sent (1) or are empty (0) ",
							" IP1553_ResetTxBuffersStatus void IP1553_ResetTxBuffersStatus(uint32_t buffers) Summary Reset the transmission buffers status Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters buffers - Bitfield of buffer to be reset When reset a buffer is set ready to be sent (1) in status Returns None ",
							" IP1553_GetRxBuffersStatus uint32_t IP1553_GetRxBuffersStatus(void) Summary Returns the reception buffers status Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters None Returns Bitfield value that indicates for each of the 32 buffers if they are free to receive data or not : empty (1) or full(0) ",
							" IP1553_ResetRxBuffersStatus void IP1553_ResetRxBuffersStatus(uint32_t buffers) Summary Reset the reception buffers status Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters buffers - Bitfield of buffer to be reset When reset a buffer is set ready to receive data (1) in status Returns None ",
							" IP1553_IrqStatusGet IP1553_INT_MASK IP1553_IrqStatusGet( void ) Summary Returns the IP1553 status Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters None Returns Current status of instance ",
							" IP1553_BcStartDataTransfer void IP1553_BcStartDataTransfer(IP1553_DATA_TX_TYPE transferType uint8_t txAddr uint8_t txSubAddr uint8_t rxAddr uint8_t rxSubAddr uint8_t dataWordCount IP1553_BUS bus ) Summary Start BC command for data transfer Preconditions IP1553_Initialize must have been called for the IP1553 instance IP1553_BuffersConfigSet must have been called to set allocated buffers IP1553_ResetRxBuffersStatus and IP1553_ResetTxBuffersStatus must have been called for the concerned buffers (sub-address) used in the command Parameters transferType - Type of data transfer command to issue txAddr - The transmitter address : 0 if BC RT address otherwise txSubAddr - The transmitter sub-address rxAddr - The receiver address : 0 if BC RT address otherwise rxSubAddr - The receiver sub-address dataWordCount - Number of data word (16 bit) to read/write 0 stand for 32 data word bus - Indicate if the transfer uses physical BUS A or B Returns None ",
							" IP1553_BcModeCommandTransfer void IP1553_BcModeCommandTransfer(uint8_t rtAddr IP1553_MODE_CMD modeCommand uint16_t cmdParameter IP1553_BUS bus ) Summary Start BC mode command transfer Preconditions IP1553_Initialize must have been called for the IP1553 instance IP1553_BuffersConfigSet must have been called to set allocated buffers Parameters rtAddr - The remote terminal address or 0x1F for broadcast modeCommand - The mode command code cmdParameter - Optional command parameter for applicable commande code bus - Indicate if the transfer uses physical BUS A or B Returns None ",
							" IP1553_GetFirstStatusWord uint16_t IP1553_GetFirstStatusWord( void ) Summary Returns the IP1553 transfer first status word Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters None Returns Value of transfer first status word ",
							" IP1553_GetSecondStatusWord uint16_t IP1553_GetSecondStatusWord( void ) Summary Returns the IP1553 transfer second status word Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters None Returns Value of transfer second status word ",
							" IP1553_BCEnableCmdSet void IP1553_BCEnableCmdSet(bool enable) Summary Enable BCEnableCmd bit to accepts or rejects the control when the terminal receives a valid Dynamic Bus Control mode command This is the value indicated in the Dynamic Bus Control bit of the status word sent in response to the mode command Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters enable - If true The terminal accepts the bus control If false the terminal reject the bus control Returns None ",
							" IP1553_SREQBitCmdSet void IP1553_SREQBitCmdSet(bool enable) Summary Enable or Disable SREQBitCmd bit Indicates the value of the Service Request bit to be returned in status word transfers Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters enable - If true Service Request bit returned in status word transfers is 1 0 if false Returns None ",
							" IP1553_BusyBitCmdSet void IP1553_BusyBitCmdSet(bool enable) Summary Enable or Disable BusyBitCmd bit Indicates the value of the busy bit to be returned in status word transfers If enabled Inhibits the transmission of the data words in response to a transmit command and its corresponding interrupt Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters enable - If true busy bit returned in status word transfers is 1 0 if false Returns None ",
							" IP1553_SSBitCmdSet void IP1553_SSBitCmdSet(bool enable) Summary Enable or Disable SSBitCmd bit Indicates the value of the Subsystem Flag bit to be returned in status word transfers Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters enable - If true Subsystem Flag bit returned in status word transfers is 1 0 if false Returns None ",
							" IP1553_TRBitCmdSet void IP1553_TRBitCmdSet(bool enable) Summary Enable or Disable TRBitCmd bit Indicates the value of the T/F bit to be returned in status word transfers Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters enable - If true T/F bit returned in status word transfers is 1 0 if false Returns None Note : After reception of a valid \"Inhibit T/F Bit\" command the T/F bit is maintained at logic level 0 ",
							" IP1553_BitWordSet void IP1553_BitWordSet(uint16_t bitWord) Summary Set the built-in self test results in BIT register This value is sent by the terminal in response to a \"Transmit Built-In Test\" Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters bitWord - Built-in self test results value Returns None ",
							" IP1553_VectorWordSet void IP1553_VectorWordSet(uint16_t vectorWord) Summary Set the Vector Word value to be sent by the terminal in response to a \"Transmit Vector Word\" command Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters vectorWord - Vector Word value to be sent by the terminal Returns None ",
							" IP1553_CallbackRegister void IP1553_CallbackRegister(IP1553_CALLBACK callback uintptr_t context) Summary Sets the pointer to the function (and it's context) to be called when the given 1553's interrupt events occur Description This function sets the pointer to a client function to be called \"back\" when the given 1553's interrupt events occur It also passes a context value (usually a pointer to a context structure) that is passed into the function when it is called The specified callback function will be called from the peripheral interrupt context Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters callback - A pointer to a function with a calling signature defined by the IP1553_CALLBACK data type Setting this to NULL disables the callback feature context - A value (usually a pointer) passed (unused) into the function identified by the callback parameter Returns None ",
							" IP1553_InterruptEnable void IP1553_InterruptEnable(IP1553_INT_MASK interruptMask) Summary Enables IP1553 module Interrupt Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters interruptMask - Bitfield mask of Interrupts to be enabled Returns None ",
							" IP1553_InterruptDisable void IP1553_InterruptDisable(IP1553_INT_MASK interruptMask) Summary Disables IP1553 module Interrupt Preconditions IP1553_Initialize must have been called for the IP1553 instance Parameters interruptMask - Bitfield mask of Interrupts to be disabled Returns None ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" SAM RH707 Aerospace Libraries The following peripherals are supported for this family: ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" FLEXRAMECC_GetFailData uint32_t FLEXRAMECC_GetFailData(void) Summary Get the last fail data were ECC error occurs in FLEXRAM memory Preconditions None Parameters None Returns Data were fixable or unfixable error occurred in FLEXRAM memory ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" TCMECC_GetFailDataITCM uint32_t TCMECC_GetFailDataITCM(void) Summary Get the last fail data were ECC error occurs in Instruction TCM Preconditions None Parameters None Returns Data were fixable or unfixable error occurred in ITCM ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" TCMECC_GetFailDataDTCM uint32_t TCMECC_GetFailDataDTCM(void) Summary Get the last fail data were ECC error occurs in Data TCM Preconditions None Parameters None Returns Data were fixable or unfixable error occurred in DTCM ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" IP1553_INT_MASK typedef enum { IP1553_INT_MASK_EMT = IP1553_ISR_EMT_Msk IP1553_INT_MASK_MTE = IP1553_ISR_MTE_Msk IP1553_INT_MASK_ERX = IP1553_ISR_ERX_Msk IP1553_INT_MASK_ETX = IP1553_ISR_ETX_Msk IP1553_INT_MASK_ETRANS_MASK = IP1553_ISR_ETRANS_Msk IP1553_INT_MASK_TE = IP1553_ISR_TE_Msk IP1553_INT_MASK_TCE = IP1553_ISR_TCE_Msk IP1553_INT_MASK_TPE = IP1553_ISR_TPE_Msk IP1553_INT_MASK_TDE = IP1553_ISR_TDE_Msk IP1553_INT_MASK_TTE = IP1553_ISR_TTE_Msk IP1553_INT_MASK_TWE = IP1553_ISR_TWE_Msk IP1553_INT_MASK_BE = IP1553_ISR_BE_Msk IP1553_INT_MASK_ITR = IP1553_ISR_ITR_Msk IP1553_INT_MASK_TVR = IP1553_ISR_TVR_Msk IP1553_INT_MASK_DBR = IP1553_ISR_DBR_Msk IP1553_INT_MASK_STR = IP1553_ISR_STR_Msk IP1553_INT_MASK_TSR = IP1553_ISR_TSR_Msk IP1553_INT_MASK_OSR = IP1553_ISR_OSR_Msk IP1553_INT_MASK_SDR = IP1553_ISR_SDR_Msk IP1553_INT_MASK_SWD = IP1553_ISR_SWD_Msk IP1553_INT_MASK_RRT = IP1553_ISR_RRT_Msk IP1553_INT_MASK_ITF = IP1553_ISR_ITF_Msk IP1553_INT_MASK_OTF = IP1553_ISR_OTF_Msk IP1553_INT_MASK_IPB = IP1553_ISR_IPB_Msk IP1553_INT_MASK_BUS = IP1553_ISR_BUS_Msk IP1553_INT_MASK_ERROR_MASK = ( IP1553_INT_MASK_MTE | IP1553_INT_MASK_TE | IP1553_INT_MASK_TCE | IP1553_INT_MASK_TPE | IP1553_INT_MASK_TDE | IP1553_INT_MASK_TTE | IP1553_INT_MASK_TWE | IP1553_INT_MASK_BE | IP1553_INT_MASK_ITR ) /* Force the compiler to reserve 32-bit memory for enum */ IP1553_INT_MASK_INVALID = 0xFFFFFFFF } IP1553_INT_MASK; Summary Identifies the IP1553 current interrupt status Description This data type identifies the IP1553 interrupt status ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); ",
							" ICM Peripheral Library (ICM) The Integrity Check Monitor (ICM) is a DMA controller that performs hash calculation over multiple memory regions using transfer descriptors located in memory (ICM Descriptor Area) The Hash function is based on the Secure Hash Algorithm (SHA) The ICM integrates two modes of operation The first one is used to hash a list of memory regions and save the digests to memory (ICM Hash Area) The second mode is an active monitoring of the memory In that mode the hash function is evaluated and compared to the digest located at a predefined memory address (ICM Hash Area) If a mismatch occurs an interrupt is raised Configuring the library Configure the peripheral library using the MHC The MHC can be used to configure the 4 memory regions (without secondary list) icm_mhc_config \"Interrupt Mode\" option can be enabled to add interface functions for interrupt support: Interrupts are enable during system initialization ICM_CallbackRegister function can be use to register a callback \"Enable dual input buffer\" : If check set DUALBUFF bit in configuration register (Higher bandwidth required on system bus) \"Automatic switch to compare digest\": If check set ASCD bit in configuration register (The ICM passes through the Main List once to calculate the message digest of the monitored area When WRAP = 1 in ICM_RCFG the ICM begins monitoring) \"Bus Burden Control\" : If check set BBC value in configuration register (The number of system clock cycles between the end of the current processing and the next block transfer is set to 2 exponent BBC Up to 32 768 cycles can be inserted) \"Disable Secondary List Branching\" : If check set SLBDIS bit in configuration register (Branching to the Secondary List is forbidden) \"Disable End of Monitoring\" : If check set EOMDIS bit in configuration register (End of Monitoring is forbidden) \"Disable Write Back\" : If check set WBDIS bit in configuration register (Write Back operations are forbidden ICM_RCFG CDWBN has no effect) icm_mhc_config_region \"Number of Region Descriptor\" : Number of regions to configure \"Start Address\" : The start address of the region \"SHA Algorithm\" : The used algorithm to compute hash for this region \"SHA Processing Delay\" : When SHA1 algorithm is processed the runtime period is either 85 or 209 clock cycles When SHA256 or SHA224 algorithm is processed the runtime period is either 72 or 194 clock cycles \"Disable interrupt events\" : Check the events to disable the corresponding interrupt for this region (enabled by default) \"Enable End of Monitoring\" : The current region descriptor will terminates the Main List WRAP value has no effect \"Wrap command\" : The next region descriptor address loaded is ICM_DSCR register value \"Digest process\" : If checked the digest value is compared to the digest stored in the Hash area Otherwise the digest is written to the Hash area \"Size in byte\" : Region data size Should be a multiple of 64 Using the library After system initialization and before enabling the ICM the memory hash address area should be set using the function ICM_SetHashStartAddress This address should be a multiple of 128 bytes For each region 32 bytes are used to store the computed hash: /* Hash Buffer were ICM will store the computed hash for each region */ uint32_t __attribute__((aligned (128))) bufferHash[4][8] = {0}; /* Set ICM memory address for generated hash */ ICM_SetHashStartAddress((uint32_t) bufferHash); If interrupts are used the callback function should be set and expected interrupts enabled: /* Register ICM Callback */ ICM_CallbackRegister(ICM_Callback_Function (uintptr_t)NULL); /* Enable Interrupts */ ICM_InterruptEnable(ICM_INT_MSK_HASH_R0_MASK | ICM_INT_MSK_HASH_R1_MASK | ICM_INT_MSK_HASH_R2_MASK | ICM_INT_MSK_HASH_R3_MASK); In order to run only one hash of the region the ICM can be start using ICM_Enable function: /* Enable ICM to perform hash of regions */ ICM_Enable(); To modify the ICM configuration it should be disabled using the ICM_Disable function: /* Disable ICM */ ICM_Disable(); /* Wait end of current memory region monitored */ while ( (ICM_StatusGet() ICM_STATUS_ENABLE) == ICM_STATUS_ENABLE ); If a first hash has already been performed the ICM can be run in monitoring mode after disabling the write back feature: /* Disable ICM Write back feature */ ICM_WriteBackDisable(true); /* Enable ICM monitor mode */ ICM_MonitorEnable(ICM_REGION0_MASK | ICM_REGION1_MASK | ICM_REGION2_MASK | ICM_REGION3_MASK); /* Enable mismatch interrupts */ ICM_InterruptEnable(ICM_INT_MSK_DIGEST_MISMATCH_R0_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R1_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R2_MASK | ICM_INT_MSK_DIGEST_MISMATCH_R3_MASK); /* Enable ICM */ ICM_Enable(); "];

